<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Glider Labs - docker</title>
  <subtitle>Infrastructure building blocks designed for humans</subtitle>
  <id>http://gliderlabs.com/blog</id>
  <link href="http://gliderlabs.com/blog"/>
  <link href="http://gliderlabs.com/blog/tags/docker.xml" rel="self"/>
  <updated>2015-09-23T14:20:00-05:00</updated>
  <author>
    <name>Glider Labs</name>
    <email>team@gliderlabs.com</email>
  </author>
  <entry>
    <title>DockerCon 2015 happened.</title>
    <link rel="alternate" href="http://gliderlabs.com/blog/2015/07/20/dockercon-2015-happened/"/>
    <id>http://gliderlabs.com/blog/2015/07/20/dockercon-2015-happened/</id>
    <published>2015-07-20T09:44:00-05:00</published>
    <updated>2015-08-10T13:24:13-05:00</updated>
    <author>
      <name>Glider Labs</name>
    </author>
    <content type="html">&lt;p&gt;This year we attended the second annual DockerCon in San Francisco. We almost didn&amp;rsquo;t, as our proposed talks were passed on. My abstracts are often generic sounding placeholders, so I don&amp;rsquo;t blame the conference organizers for skipping over an original Docker team member. Regardless, a month before the event, I got an invitation to moderate lightning talks, as well as to give one.&lt;/p&gt;

&lt;p&gt;Separately, our work with Docker, ClusterHQ, and Weaveworks on Docker plugins was announced at the keynote. They gave the three of us a session to introduce Docker plugins in more detail. ClusterHQ has &lt;a href="https://clusterhq.com/2015/07/01/docker-plugins-complete-the-puzzle/"&gt;a nice write-up&lt;/a&gt;, though The New Stack also has &lt;a href="http://thenewstack.io/the-real-docker-ecosystem-launches-with-plugins/"&gt;a good write-up&lt;/a&gt; as industry press. I was just pleasantly surprised to see the Glider Labs logo in Solomon&amp;rsquo;s keynote. (However, I&amp;rsquo;m not sure why Mesosphere is mentioned at all.)&lt;/p&gt;

&lt;p&gt;&lt;img alt="Conway's Life" src="/images/dockercon2015.jpg" /&gt;&lt;/p&gt;

&lt;p&gt;Besides that it was really great to hear from so many people using Glider Labs projects. Our Alpine image is definitely a hit. We saw a number of Docker employees using it in their demos. Talking to vendors at the booths, it seemed 90% of them were using a Glider Labs project of some kind, whether Alpine, Registrator, or Logspout. This is especially exciting because these projects are just the beginning.&lt;/p&gt;

&lt;p&gt;The lightning talks were also fun. I used my lightning talk as an excuse to put together a proof of concept for a project now called Envy. It&amp;rsquo;s a sort of development environment manager, re-envisioning the idea of development environments with containers. I believe somebody suggested it could be a Vagrant killer? I gave the demo several times at DockerCon and it was quite well received.&lt;/p&gt;

&lt;p&gt;Definitely looking forward to next year!&lt;/p&gt;

&lt;iframe src="https://player.vimeo.com/video/131329120" width="640" height="360" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;
</content>
  </entry>
  <entry>
    <title>Docker Events Explained</title>
    <link rel="alternate" href="http://gliderlabs.com/blog/2015/04/14/docker-events-explained/"/>
    <id>http://gliderlabs.com/blog/2015/04/14/docker-events-explained/</id>
    <published>2015-04-14T18:48:00-05:00</published>
    <updated>2015-08-10T13:23:07-05:00</updated>
    <author>
      <name>Matt Good</name>
    </author>
    <content type="html">&lt;p&gt;One of the fantastic features of the Docker platform is the events API. This enables tools like &lt;a href="https://github.com/gliderlabs/registrator"&gt;Registrator&lt;/a&gt; and &lt;a href="https://github.com/gliderlabs/logspout"&gt;Logspout&lt;/a&gt; to listen for container events like starting and stopping, then act on them.&lt;/p&gt;

&lt;p&gt;The &lt;a href="https://docs.docker.com/reference/api/docker_remote_api_v1.17/#monitor-dockers-events"&gt;Docker API documentation&lt;/a&gt; provides a list of the available events, but does not include much detail on what they mean and when they will occur. Since many of our tools depend on the events API, we&amp;rsquo;ve put together a chart illustrating the events triggered throughout the lifecycle of a Docker container (as of Docker version 1.5 / API version 1.17):&lt;/p&gt;

&lt;p&gt;&lt;a href="/images/docker_events.png"&gt;&lt;img width="650px" height="371px" alt="Docker events diagram" src="/images/docker_events.png" title="Container-related Docker events" /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A few container-related events are not included in this illustration since they are not affected by container state:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;export&lt;/strong&gt; emitted by &lt;code&gt;docker export&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;exec_create&lt;/strong&gt; emitted by &lt;code&gt;docker exec&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;exec_start&lt;/strong&gt; also emitted by &lt;code&gt;docker exec&lt;/code&gt; after &lt;strong&gt;exec_create&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are also several events not in this diagram that are related to Docker images rather than containers:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;import&lt;/strong&gt; emitted by &lt;code&gt;docker import&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;pull&lt;/strong&gt; emitted by &lt;code&gt;docker pull&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;untag&lt;/strong&gt; emitted by &lt;code&gt;docker rmi&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;delete&lt;/strong&gt; emitted by &lt;code&gt;docker rmi&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Running &lt;code&gt;docker rmi&lt;/code&gt; emits an &lt;code&gt;untag&lt;/code&gt; event when removing an image tag name. The &lt;code&gt;rmi&lt;/code&gt; command may also emit &lt;code&gt;delete&lt;/code&gt; events for any image IDs deleted, either by deleting an image by ID directly, or deleting the last tag referring to it.&lt;/p&gt;

&lt;p&gt;We encourage more people to take advantage of the Docker events API, and we hope this diagram is useful. The Docker team is &lt;a href="https://github.com/docker/docker/issues/12164"&gt;considering including this diagram in the documentation&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>New Logspout: Extensible Docker Logging</title>
    <link rel="alternate" href="http://gliderlabs.com/blog/2015/03/31/new-logspout-extensible-docker-logging/"/>
    <id>http://gliderlabs.com/blog/2015/03/31/new-logspout-extensible-docker-logging/</id>
    <published>2015-03-31T15:07:00-05:00</published>
    <updated>2015-08-10T13:22:59-05:00</updated>
    <author>
      <name>Jeff Lindsay</name>
    </author>
    <content type="html">&lt;p&gt;&lt;a href="https://github.com/gliderlabs/logspout"&gt;Logspout&lt;/a&gt; is a Docker container for stateless, host-level log forwarding. It was designed specifically for Docker container logs. It&amp;rsquo;s one of the earliest standalone components built for the Docker ecosystem, and the canonical way to deal with Docker logs for many.&lt;/p&gt;

&lt;p&gt;After Glider Labs adopted the project, we updated and automated its build and release process, switched it to &lt;a href="http://gliderlabs.com/blog/2015/03/20/our-minimal-alpine-linux-image-joins-docker-official-images/"&gt;Alpine&lt;/a&gt;, and took care of a few long standing bugs. Our next release will focus on a re-architected version that is more modular and more extensible.&lt;/p&gt;

&lt;p&gt;You can try it now in master &lt;code&gt;HEAD&lt;/code&gt;, which is also tagged on Docker Hub as &lt;code&gt;:master&lt;/code&gt;. In preparation for the next release, let us tell you more about it.&lt;/p&gt;

&lt;h3&gt;Modules&lt;/h3&gt;

&lt;p&gt;Logspout now includes a concept of modules, similar to, say, Nginx modules. Modules are chunks of functionality added or removed at compile-time. In our case, they&amp;rsquo;re added or removed at Docker build-time, with no need for you to set up or install any compiler toolchain.&lt;/p&gt;

&lt;p&gt;Managing modules happens in a &lt;code&gt;modules.go&lt;/code&gt; source file that is intended for operators to edit. Although it&amp;rsquo;s a Go source file, think of it like a configuration file. No real knowledge of Go is necessary. It looks like this:&lt;/p&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;package&lt;/span&gt;&lt;span class="x"&gt; &lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="x"&gt;

&lt;/span&gt;&lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="x"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="x"&gt;
    &lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="x"&gt; &lt;/span&gt;&lt;span class="s"&gt;"github.com/gliderlabs/logspout/adapters/raw"&lt;/span&gt;&lt;span class="x"&gt;
    &lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="x"&gt; &lt;/span&gt;&lt;span class="s"&gt;"github.com/gliderlabs/logspout/adapters/syslog"&lt;/span&gt;&lt;span class="x"&gt;
    &lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="x"&gt; &lt;/span&gt;&lt;span class="s"&gt;"github.com/gliderlabs/logspout/httpstream"&lt;/span&gt;&lt;span class="x"&gt;
    &lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="x"&gt; &lt;/span&gt;&lt;span class="s"&gt;"github.com/gliderlabs/logspout/routesapi"&lt;/span&gt;&lt;span class="x"&gt;
    &lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="x"&gt; &lt;/span&gt;&lt;span class="s"&gt;"github.com/gliderlabs/logspout/transports/tcp"&lt;/span&gt;&lt;span class="x"&gt;
    &lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="x"&gt; &lt;/span&gt;&lt;span class="s"&gt;"github.com/gliderlabs/logspout/transports/udp"&lt;/span&gt;&lt;span class="x"&gt;
&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="x"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;These are the default modules used in Logspout. It&amp;rsquo;s safe to remove any of these lines to drop a module. You can also add lines pointing to new Logspout module packages. These packages can live in any repository, allowing you to build your own modules without forking or pushing upstream to the logspout repository.&lt;/p&gt;

&lt;p&gt;Editing this file seems to suggest you&amp;rsquo;d need to fork the logspout repository to make a custom build, but you don&amp;rsquo;t. We let you customize &lt;code&gt;modules.go&lt;/code&gt; with an &lt;code&gt;ONBUILD&lt;/code&gt; hook. With this, making a custom build of Logspout that follows official releases is extremely easy. &lt;a href="https://github.com/gliderlabs/logspout/tree/master/custom"&gt;Here is an example.&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;Adapters and Transports&lt;/h3&gt;

&lt;p&gt;Previously, the idea of a &amp;ldquo;Logspout adapter&amp;rdquo; was just a hardcoded function mapping in Logspout. We started with an RFC 3164 &amp;ldquo;syslog&amp;rdquo; adapter, then others contributed two more: a JSON over UDP adapter, and a separate &amp;ldquo;rfc5424&amp;rdquo; adapter for modern syslog. People also asked for TCP syslog, or hacked in support for other adapters like RabbitMQ and Kafka.&lt;/p&gt;

&lt;p&gt;Using modules, we now have a real API for adding new and externally maintained adapters. We also support different transports, which can be used by adapters to prevent needing to create adapters for each type of possible transport. For example, the new syslog adapter lets you use UDP, TCP, or any other transport added in the future, such as perhaps &lt;a href="https://github.com/gliderlabs/logspout/blob/master/transports/tls/tls.go"&gt;TLS&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We then redesigned our built-in adapters. There is now a single syslog adapter that supports both RFC 5425 (default) and RFC 3164. It&amp;rsquo;s more configurable and out of the box has more sensible defaults. There&amp;rsquo;s also a raw adapter that allows generalized templated log messages over any supported transport.&lt;/p&gt;

&lt;h3&gt;Extension Points&lt;/h3&gt;

&lt;p&gt;For those interested in writing adapters, or are curious about our extension architecture, Logspout modules are enabled by &lt;a href="https://github.com/progrium/go-extpoints"&gt;go-extpoints&lt;/a&gt;. This is a library and generator for building extension points in Go programs. Extension points are a mechanism for &lt;a href="http://en.wikipedia.org/wiki/Inversion_of_control"&gt;inversion of control&lt;/a&gt;, similar to &lt;a href="http://en.wikipedia.org/wiki/Dependency_injection"&gt;dependency injection&lt;/a&gt;. Each extension point represents a part of Logspout that a module can hook into.&lt;/p&gt;

&lt;p&gt;Here is a list of current extension point types in Logspout. Some are more advanced or internally used than others, but are available to module authors nonetheless.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;AdapterFactory&lt;/strong&gt; - allows you to add new types of route adapters (syslog, Kafka, etc)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;AdapterTransport&lt;/strong&gt; - allows you to add new adapter transports (UDP, TLS, etc)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;HttpHandler&lt;/strong&gt; - allows you to add new top level endpoints to the HTTP service&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Job&lt;/strong&gt; - allows you to add parallel running tasks (HTTP server, container pump, etc)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;LogRouter&lt;/strong&gt; - allows you to add new log routing intakes (containers, syslog, etc)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Extension &lt;em&gt;points&lt;/em&gt; are package singletons where you register and access objects implementing the type for that extension point. Extension &lt;em&gt;types&lt;/em&gt; like those listed above each have their own extension point. Extension types are either a Go interface, where an extension must implement the interface methods, or a function signature type definition, where an extension is literally a callback function.&lt;/p&gt;

&lt;p&gt;Here is the simplest example of a module package hooking into an extension point. We implement the &lt;code&gt;HttpHandler&lt;/code&gt; function signature, which just says to return a Go &lt;code&gt;http.Handler&lt;/code&gt;, and register it with the &lt;code&gt;HttpHandlers&lt;/code&gt; extension point on package initialization.&lt;/p&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;package&lt;/span&gt;&lt;span class="x"&gt; &lt;/span&gt;&lt;span class="n"&gt;hello&lt;/span&gt;&lt;span class="x"&gt;

&lt;/span&gt;&lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="x"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="x"&gt;
  &lt;/span&gt;&lt;span class="s"&gt;"github.com/gliderlabs/logspout/router"&lt;/span&gt;&lt;span class="x"&gt;
  &lt;/span&gt;&lt;span class="s"&gt;"net/http"&lt;/span&gt;&lt;span class="x"&gt;
&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="x"&gt;

&lt;/span&gt;&lt;span class="k"&gt;func&lt;/span&gt;&lt;span class="x"&gt; &lt;/span&gt;&lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="x"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="x"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;router&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HttpHandlers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;HelloHandler&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="x"&gt; &lt;/span&gt;&lt;span class="s"&gt;"hello"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="x"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="x"&gt;

&lt;/span&gt;&lt;span class="k"&gt;func&lt;/span&gt;&lt;span class="x"&gt; &lt;/span&gt;&lt;span class="n"&gt;HelloHandler&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="x"&gt; &lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Handler&lt;/span&gt;&lt;span class="x"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="x"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;mux&lt;/span&gt;&lt;span class="x"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="x"&gt; &lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NewServeMux&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="x"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;mux&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HandleFunc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/hello"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="x"&gt; &lt;/span&gt;&lt;span class="k"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="x"&gt; &lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ResponseWriter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="x"&gt; &lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="x"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="x"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="x"&gt;
    &lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Write&lt;/span&gt;&lt;span class="p"&gt;([]&lt;/span&gt;&lt;span class="kt"&gt;byte&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hello!"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="x"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;&lt;span class="x"&gt;
  &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="x"&gt; &lt;/span&gt;&lt;span class="n"&gt;mux&lt;/span&gt;&lt;span class="x"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="x"&gt;

&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Adding an import for this package in &lt;code&gt;modules.go&lt;/code&gt; and rebuilding will add a new &lt;code&gt;/hello&lt;/code&gt; endpoint to the Logspout web server.&lt;/p&gt;

&lt;p&gt;For more examples, check out the other default modules in the Logspout repository such as &lt;a href="https://github.com/gliderlabs/logspout/tree/master/httpstream"&gt;httpstream&lt;/a&gt;, &lt;a href="https://github.com/gliderlabs/logspout/tree/master/routesapi"&gt;routesapi&lt;/a&gt;, and of course the &lt;a href="https://github.com/gliderlabs/logspout/tree/master/adapters"&gt;adapter&lt;/a&gt; and &lt;a href="https://github.com/gliderlabs/logspout/tree/master/transports"&gt;transport&lt;/a&gt; modules. Even much of the core Logspout &lt;a href="https://github.com/gliderlabs/logspout/tree/master/router"&gt;router package&lt;/a&gt; is implemented with extension points.&lt;/p&gt;

&lt;h3&gt;Docker Log Drivers&lt;/h3&gt;

&lt;p&gt;Docker itself is about to &lt;a href="https://github.com/docker/docker/issues/7195"&gt;support log drivers&lt;/a&gt;. This introduces improvements to current Docker logging, and lets you recompile Docker with new log drivers.&lt;/p&gt;

&lt;p&gt;Logspout will continue to be an easier and more configurable solution for drop-in container log forwarding. The built-in log drivers in Docker will actually help many Logspout deployments, since you&amp;rsquo;ll be able to disable Docker writing logs to local disk. Let Logspout forward logs to where they should really be.&lt;/p&gt;

&lt;p&gt;If you have questions about writing modules, using extension points, or using the latest Logspout, let us know via &lt;a href="https://github.com/gliderlabs/logspout/issues"&gt;Logspout issues&lt;/a&gt;, or join us in &lt;code&gt;#gliderlabs&lt;/code&gt; on Freenode.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Our minimal Alpine Linux image joins Docker official images</title>
    <link rel="alternate" href="http://gliderlabs.com/blog/2015/03/20/our-minimal-alpine-linux-image-joins-docker-official-images/"/>
    <id>http://gliderlabs.com/blog/2015/03/20/our-minimal-alpine-linux-image-joins-docker-official-images/</id>
    <published>2015-03-20T18:32:00-05:00</published>
    <updated>2015-08-10T13:22:35-05:00</updated>
    <author>
      <name>Jeff Lindsay</name>
    </author>
    <content type="html">&lt;p&gt;When building Docker delivery pipelines, image size is extremely important for fast deploys. Unfortunately, it&amp;rsquo;s too easy to make Docker images over 1GB in size. This is true even when you use many of the official images. It&amp;rsquo;s especially true with many third-party base images. Dockerfile optimization is usually our first priority with clients.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.alpinelinux.org/"&gt;Alpine Linux&lt;/a&gt; has become our distribution of choice for minimal containers. Since discovering Alpine, we&amp;rsquo;ve been maintaining what&amp;rsquo;s become a fairly popular Docker image for it called &lt;a href="https://registry.hub.docker.com/u/gliderlabs/alpine/"&gt;&lt;code&gt;gliderlabs/alpine&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;ve been porting many of our open source containers like &lt;a href="https://github.com/gliderlabs/logspout"&gt;logspout&lt;/a&gt; and &lt;a href="https://github.com/gliderlabs/registrator"&gt;registrator&lt;/a&gt; to it. Although it&amp;rsquo;s not ideal for every situation, we were still surprised it was not in the Docker standard library. So we began preparing ours to be submitted.&lt;/p&gt;

&lt;p&gt;This week we&amp;rsquo;re happy to announce that our image is now merged into the Docker library as an &lt;a href="https://registry.hub.docker.com/_/alpine/"&gt;official image&lt;/a&gt;. You can now build Alpine Linux based containers with simply &lt;code&gt;FROM alpine&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You can also continue to use &lt;code&gt;gliderlabs/alpine&lt;/code&gt;. We use the same &lt;a href="https://github.com/gliderlabs/docker-alpine"&gt;repository&lt;/a&gt; and &lt;a href="https://circleci.com/gh/gliderlabs/docker-alpine"&gt;open build process&lt;/a&gt; to build &lt;code&gt;alpine&lt;/code&gt; as &lt;code&gt;gliderlabs/alpine&lt;/code&gt;. There are slight differences, but are effectively the same.&lt;/p&gt;

&lt;p&gt;Whichever one you use, we hope you enjoy using Alpine Linux with Docker!&lt;/p&gt;
</content>
  </entry>
</feed>
