<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Glider Labs</title>
  <subtitle>Infrastructure building blocks designed for humans</subtitle>
  <id>http://gliderlabs.com/blog</id>
  <link href="http://gliderlabs.com/blog"/>
  <link href="http://gliderlabs.com/blog/atom.xml" rel="self"/>
  <updated>2015-08-10T13:55:00-05:00</updated>
  <author>
    <name>Glider Labs</name>
    <email>team@gliderlabs.com</email>
  </author>
  <entry>
    <title>Registrator v6</title>
    <link rel="alternate" href="http://gliderlabs.com/blog/2015/08/10/registrator-v6/"/>
    <id>http://gliderlabs.com/blog/2015/08/10/registrator-v6/</id>
    <published>2015-08-10T13:55:00-05:00</published>
    <updated>2015-08-10T14:18:28-05:00</updated>
    <author>
      <name>Glider Labs</name>
    </author>
    <content type="html">&lt;p&gt;Last Friday we finally cut a &lt;a href="https://github.com/gliderlabs/registrator/releases/tag/v6"&gt;new release&lt;/a&gt; of Registrator. At the bottom of this
post are relevant changes, but for most already using Registrator from master there is nothing new. However, with this release there is also a great new &lt;a href="http://gliderlabs.com/registrator"&gt;documentation
site&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Our last release turned out to have some critical bugs that caused us to
immediately re-point &lt;code&gt;gliderlabs/registrator:latest&lt;/code&gt; to our &lt;em&gt;previous&lt;/em&gt; release.
So for the past six months, if anybody was using &lt;code&gt;:latest&lt;/code&gt;, they were using a
pretty old version. Most active users have known to use &lt;code&gt;:master&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The plan was to fix the issues in v5 and quickly move to v6, but to avoid a
repeat, we made the fixes and decided to wait and let the community verify
stability of master. This went on for too long and for various reasons continued
to slip.&lt;/p&gt;

&lt;p&gt;Given the popularity of Registrator and recent sponsorship by
&lt;a href="http://weave.works/"&gt;Weave&lt;/a&gt;, we finally got to invest some time in Registrator to
make it a more sustainable project. First we had to release current master. We
also put some time into documentation, as well as &lt;a href="http://gliderlabs.com/pagebuilder"&gt;documentation
infrastructure&lt;/a&gt; for other projects.&lt;/p&gt;

&lt;p&gt;Expect more releases soon as we start heading towards an LTS release.&lt;/p&gt;

&lt;h3&gt;Fixed&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Support for etcd v0 and v2&lt;/li&gt;
&lt;li&gt;Panic from invalid skydns2 URI.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Added&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Optional periodic resyncing of services from containers&lt;/li&gt;
&lt;li&gt;More error logging for registries&lt;/li&gt;
&lt;li&gt;Support for services on containers with &lt;code&gt;--net=host&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Added &lt;code&gt;extensions.go&lt;/code&gt; file for adding/disabling components&lt;/li&gt;
&lt;li&gt;Interpolate &lt;code&gt;SERVICE_PORT&lt;/code&gt; and &lt;code&gt;SERVICE_IP&lt;/code&gt; in &lt;code&gt;SERVICE_X_CHECK_SCRIPT&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Ability to force IP for a service in Consul&lt;/li&gt;
&lt;li&gt;Implemented initial ping for every service registry&lt;/li&gt;
&lt;li&gt;Option to only deregister containers cleanly shutdown&lt;/li&gt;
&lt;li&gt;Added support for label metadata along with environment variables&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Changed&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Overall refactoring and cleanup&lt;/li&gt;
&lt;li&gt;Decoupled registries into subpackages using extpoints&lt;/li&gt;
&lt;li&gt;Replaced check-http script with Consul&amp;rsquo;s native HTTP checks&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>High-performance messaging expertise</title>
    <link rel="alternate" href="http://gliderlabs.com/blog/2015/08/04/high-performance-messaging/"/>
    <id>http://gliderlabs.com/blog/2015/08/04/high-performance-messaging/</id>
    <published>2015-08-04T12:20:00-05:00</published>
    <updated>2015-08-10T13:24:23-05:00</updated>
    <author>
      <name>Jeff Lindsay</name>
    </author>
    <content type="html">&lt;p&gt;Messaging systems excite me more than they should. Perhaps because they&amp;rsquo;re so
foundational to distributed systems. Yet there&amp;rsquo;s tons of deep architectural
knowledge, both high-level and low-level that&amp;rsquo;s not well known. There are a
handful of messaging domain experts that I love hearing from, and one of them is
&lt;a href="http://mechanical-sympathy.blogspot.com/"&gt;Martin Thompson&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Last year at Strange Loop, Martin gave a talk on a high-performance messaging
project called Aeron. I&amp;rsquo;m sharing this talk less for the project, and more for the
knowledge and findings associated with the project:&lt;/p&gt;

&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/tM4YskS94b0" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Not mentioned a whole lot in this talk is his notion of &amp;ldquo;mechanical sympathy,&amp;rdquo;
which came up with the &lt;a href="http://martinfowler.com/articles/lmax.html"&gt;LMAX architecture&lt;/a&gt;
everybody was raving about a few years ago. The simple idea of aligning our
software to the strengths of our underlying hardware, and avoiding operations
our hardware is not great at.&lt;/p&gt;

&lt;p&gt;About 80% of our software will never need this level of optimization. That said,
I think the lessons learned from those like Martin Thompson should be more well
known.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>DockerCon 2015 happened.</title>
    <link rel="alternate" href="http://gliderlabs.com/blog/2015/07/20/dockercon-2015-happened/"/>
    <id>http://gliderlabs.com/blog/2015/07/20/dockercon-2015-happened/</id>
    <published>2015-07-20T09:44:00-05:00</published>
    <updated>2015-08-10T13:24:13-05:00</updated>
    <author>
      <name>Glider Labs</name>
    </author>
    <content type="html">&lt;p&gt;This year we attended the second annual DockerCon in San Francisco. We almost didn&amp;rsquo;t, as our proposed talks were passed on. My abstracts are often generic sounding placeholders, so I don&amp;rsquo;t blame the conference organizers for skipping over an original Docker team member. Regardless, a month before the event, I got an invitation to moderate lightning talks, as well as to give one.&lt;/p&gt;

&lt;p&gt;Separately, our work with Docker, ClusterHQ, and Weaveworks on Docker plugins was announced at the keynote. They gave the three of us a session to introduce Docker plugins in more detail. ClusterHQ has &lt;a href="https://clusterhq.com/2015/07/01/docker-plugins-complete-the-puzzle/"&gt;a nice write-up&lt;/a&gt;, though The New Stack also has &lt;a href="http://thenewstack.io/the-real-docker-ecosystem-launches-with-plugins/"&gt;a good write-up&lt;/a&gt; as industry press. I was just pleasantly surprised to see the Glider Labs logo in Solomon&amp;rsquo;s keynote. (However, I&amp;rsquo;m not sure why Mesosphere is mentioned at all.)&lt;/p&gt;

&lt;p&gt;&lt;img alt="Conway's Life" src="/images/dockercon2015.jpg" /&gt;&lt;/p&gt;

&lt;p&gt;Besides that it was really great to hear from so many people using Glider Labs projects. Our Alpine image is definitely a hit. We saw a number of Docker employees using it in their demos. Talking to vendors at the booths, it seemed 90% of them were using a Glider Labs project of some kind, whether Alpine, Registrator, or Logspout. This is especially exciting because these projects are just the beginning.&lt;/p&gt;

&lt;p&gt;The lightning talks were also fun. I used my lightning talk as an excuse to put together a proof of concept for a project now called Envy. It&amp;rsquo;s a sort of development environment manager, re-envisioning the idea of development environments with containers. I believe somebody suggested it could be a Vagrant killer? I gave the demo several times at DockerCon and it was quite well received.&lt;/p&gt;

&lt;p&gt;Definitely looking forward to next year!&lt;/p&gt;

&lt;iframe src="https://player.vimeo.com/video/131329120" width="640" height="360" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;
</content>
  </entry>
  <entry>
    <title>Build simple systems to build good systems</title>
    <link rel="alternate" href="http://gliderlabs.com/blog/2015/04/29/build-simple-systems-to-build-good-systems/"/>
    <id>http://gliderlabs.com/blog/2015/04/29/build-simple-systems-to-build-good-systems/</id>
    <published>2015-04-29T06:18:00-05:00</published>
    <updated>2015-08-10T13:23:51-05:00</updated>
    <author>
      <name>Jeff Lindsay</name>
    </author>
    <content type="html">&lt;p&gt;We often talk about complexity in software systems, but for some reason we don&amp;rsquo;t seem to talk enough about simplicity. I was quite happy to find that Rich Hickey&amp;rsquo;s keynote at Strange Loop 2011 focused on simplicity.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="http://www.infoq.com/presentations/Simple-Made-Easy"&gt;Rich Hickey - Simple Made Easy on InfoQ&lt;/a&gt;&lt;/strong&gt; (&lt;a href="https://github.com/matthiasn/talk-transcripts/blob/master/Hickey_Rich/SimpleMadeEasy.md"&gt;transcript&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;Simple Made Easy is about Hickey&amp;rsquo;s exploration of what simple really means, what it doesn&amp;rsquo;t mean, and how that can be used as a guide towards simplicity in software.&lt;/p&gt;

&lt;p&gt;Most experienced programmers know that simplicity is difficult to achieve. Perhaps part of the reason for this is that simplicity seems to be somewhat subjective. Here, Hickey explains a framework to more objectively identify how simple a design is.&lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;img alt="Simple as not interleaved" src="/images/simple_made_easy.jpg" /&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;He starts with the etymology of simple. It describes a meaning around the amount of &lt;em&gt;interleaving&lt;/em&gt;. What&amp;rsquo;s interesting is that this interpretation of simplicity is not about the number of elements, just how interleaved they are.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Simplicity is not about counting. I&amp;rsquo;d rather have more things hanging nice, straight down, not twisted together, than just a couple of things tied in a knot.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To help with this particular meaning of simple, he shares an archaic word that is specifically the opposite of this:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;complect&lt;/strong&gt; - to interleave, entwine, or braid&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;By using complecting as our primary anti-pattern, we can more easily see a path towards simplicity than the vague notion of &amp;ldquo;avoiding complexity.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;He also identifies that simple is not the same as easy, despite many using those words interchangeably. While easy is ultimately relative, simple in these terms has some objectivity to it. We can ask, &amp;ldquo;How much interleaving is there?&amp;rdquo;&lt;/p&gt;

&lt;p&gt;The talk goes over a number tactical approaches to simplicity by not complecting, but there&amp;rsquo;s also wisdom shared around the value of simplicity.&lt;/p&gt;

&lt;p&gt;Perhaps the biggest issue with complexity is that it undermines understanding your software. He makes the point that understanding is the real key to making changes quickly in software.&lt;/p&gt;

&lt;p&gt;Conventional wisdom says testing is how we can make changes quickly. While there is clearly value in testing, the popular notion that test coverage above all else is what you need to move quickly is challenged by Hickey. He calls it guardrail programming.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;What&amp;rsquo;s true of every bug found in the field? It passed all the tests. So now what do you do? I think we&amp;rsquo;re in this world I&amp;rsquo;d like to call guardrail programming. It&amp;rsquo;s really sad. We&amp;rsquo;re like, &amp;ldquo;I can make change because I have tests!&amp;rdquo; Who does that? Who drives their car around banging against the guardrail saying, &amp;ldquo;Whoa! I&amp;rsquo;m glad I&amp;rsquo;ve got these guardrails because I&amp;rsquo;d never make it to the show on time.&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Once you find a bug, tests only tell you what the problem isn&amp;rsquo;t. You have to reason about the program, debug it, try things. If the program is complex, this is harder to do. The only way to improve this process is if the program is simple.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Compared to the complexity we can create, we&amp;rsquo;re all statistically at the same point in our ability to understand it, which is not very good. So we&amp;rsquo;re going to have to bring things towards us.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;There&amp;rsquo;s definitely a lot of great insight in this talk. As a final point, let&amp;rsquo;s remember that simplicity doesn&amp;rsquo;t just happen. It&amp;rsquo;s not the default mode of software engineering.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Simplicity is a choice. It requires constant vigilance.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We need more thinking around simplicity. If you know of other great talks on simplicity, in software or otherwise, please share in the comments.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Weave Sponsors Glider Labs Service Discovery Projects</title>
    <link rel="alternate" href="http://gliderlabs.com/blog/2015/04/22/weave-sponsors-glider-labs-service-discovery-projects/"/>
    <id>http://gliderlabs.com/blog/2015/04/22/weave-sponsors-glider-labs-service-discovery-projects/</id>
    <published>2015-04-22T18:23:00-05:00</published>
    <updated>2015-08-10T13:23:12-05:00</updated>
    <author>
      <name>Jeff Lindsay</name>
    </author>
    <content type="html">&lt;p&gt;Today we&amp;rsquo;re happy to introduce &lt;a href="http://weave.works/"&gt;Weaveworks&lt;/a&gt;, authors of &lt;a href="https://github.com/weaveworks/weave"&gt;Weave&lt;/a&gt;, as our newest sponsor. This sponsorship will most immediately support development and increased releases of &lt;a href="https://github.com/gliderlabs/registrator"&gt;Registrator&lt;/a&gt;, our Docker service discovery bridge. It also enables us to release a few new projects in this space over the next couple months.&lt;/p&gt;

&lt;p&gt;This six month sponsorship not only supports our work, but the joint effort across vendors to help Docker become more extensible. Along with Weaveworks, we&amp;rsquo;re among a few working with Docker to help design a plugin system, initially allowing basic extension points around networking and volumes.&lt;/p&gt;

&lt;p&gt;It also means we&amp;rsquo;ll be exploring integration with various Weave components, such as Registrator with &lt;a href="https://github.com/weaveworks/weave/tree/master/weavedns"&gt;WeaveDNS&lt;/a&gt;. We&amp;rsquo;ll also be sharing some of the use cases with current and future Weave services for Docker software networking.&lt;/p&gt;

&lt;p&gt;Besides our consulting and system integration services, Glider Labs is an independent systems R&amp;amp;D lab. Our open source work towards unraveling the &lt;a href="http://gliderlabs.com/blog/2015/03/24/the-modern-systems-software-mess/"&gt;modern systems mess&lt;/a&gt; is made possible by sponsorships like this. If your organization is interested in supporting our work the way Weaveworks has, please &lt;a href="mailto:team+sponsor@gliderlabs.com"&gt;let us know&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Docker Events Explained</title>
    <link rel="alternate" href="http://gliderlabs.com/blog/2015/04/14/docker-events-explained/"/>
    <id>http://gliderlabs.com/blog/2015/04/14/docker-events-explained/</id>
    <published>2015-04-14T18:48:00-05:00</published>
    <updated>2015-08-10T13:23:07-05:00</updated>
    <author>
      <name>Matt Good</name>
    </author>
    <content type="html">&lt;p&gt;One of the fantastic features of the Docker platform is the events API. This enables tools like &lt;a href="https://github.com/gliderlabs/registrator"&gt;Registrator&lt;/a&gt; and &lt;a href="https://github.com/gliderlabs/logspout"&gt;Logspout&lt;/a&gt; to listen for container events like starting and stopping, then act on them.&lt;/p&gt;

&lt;p&gt;The &lt;a href="https://docs.docker.com/reference/api/docker_remote_api_v1.17/#monitor-dockers-events"&gt;Docker API documentation&lt;/a&gt; provides a list of the available events, but does not include much detail on what they mean and when they will occur. Since many of our tools depend on the events API, we&amp;rsquo;ve put together a chart illustrating the events triggered throughout the lifecycle of a Docker container (as of Docker version 1.5 / API version 1.17):&lt;/p&gt;

&lt;p&gt;&lt;a href="/images/docker_events.png"&gt;&lt;img width="650px" height="371px" alt="Docker events diagram" src="/images/docker_events.png" title="Container-related Docker events" /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A few container-related events are not included in this illustration since they are not affected by container state:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;export&lt;/strong&gt; emitted by &lt;code&gt;docker export&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;exec_create&lt;/strong&gt; emitted by &lt;code&gt;docker exec&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;exec_start&lt;/strong&gt; also emitted by &lt;code&gt;docker exec&lt;/code&gt; after &lt;strong&gt;exec_create&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are also several events not in this diagram that are related to Docker images rather than containers:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;import&lt;/strong&gt; emitted by &lt;code&gt;docker import&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;pull&lt;/strong&gt; emitted by &lt;code&gt;docker pull&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;untag&lt;/strong&gt; emitted by &lt;code&gt;docker rmi&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;delete&lt;/strong&gt; emitted by &lt;code&gt;docker rmi&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Running &lt;code&gt;docker rmi&lt;/code&gt; emits an &lt;code&gt;untag&lt;/code&gt; event when removing an image tag name. The &lt;code&gt;rmi&lt;/code&gt; command may also emit &lt;code&gt;delete&lt;/code&gt; events for any image IDs deleted, either by deleting an image by ID directly, or deleting the last tag referring to it.&lt;/p&gt;

&lt;p&gt;We encourage more people to take advantage of the Docker events API, and we hope this diagram is useful. The Docker team is &lt;a href="https://github.com/docker/docker/issues/12164"&gt;considering including this diagram in the documentation&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
</feed>
